{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "LSTM.ipynb",
      "private_outputs": true,
      "provenance": [],
      "mount_file_id": "16lW7fUjSp77KIruT_0vjFNEYvJftaWmj",
      "authorship_tag": "ABX9TyMD7ymTStiGzMcJ5PRsgFAL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/maryaammm/ReSCable/blob/main/LSTM.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mNFQWG9oY3Ec"
      },
      "source": [
        "import matplotlib.pyplot\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from pandas import DataFrame as df\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import LSTM\n",
        "from keras.models import load_model\n",
        "from keras.callbacks import ModelCheckpoint"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TN2SbZ7a1ytE"
      },
      "source": [
        "from google.colab import drive  #mounting Google Drive\n",
        "drive.mount('/content/drive')\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jmSyHSt2Qr1C"
      },
      "source": [
        "# Window Generator & Data Loader"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LdW5o1_tZUGR"
      },
      "source": [
        "\n",
        "data=pd.read_csv(\"/content/drive/My Drive/putty_data.csv\")\n",
        "WINDOW_SIZE = 2\n",
        "\n",
        "def window_gen(data):\n",
        "    window_size = WINDOW_SIZE\n",
        "    l = len(data) // window_size\n",
        "    for i in range(l):\n",
        "        label=np.array(data.iloc[i*window_size:(i+1)*window_size,-1])\n",
        "        \n",
        "        \n",
        "        mean_val=np.mean(label)\n",
        "\n",
        "        if(mean_val>0.0):\n",
        "           label=1\n",
        "        else:\n",
        "            label=0\n",
        "        yield (data.iloc[i*window_size:(i+1)*window_size,:], label)\n",
        "\n",
        "target, input_val = list(), list()\n",
        "for inp, targ in window_gen(data):\n",
        "  input_val.append(np.array(inp.iloc[:, -2].values).reshape(WINDOW_SIZE, 1))\n",
        "  target.append(targ)\n",
        "\n",
        "input_val = np.array(input_val)\n",
        "target = np.array(target)\n",
        "print((target))\n",
        "print((input_val[1]))\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j8RdgvW7Q8PY"
      },
      "source": [
        "#LSTM Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z5SnYmf4uSie"
      },
      "source": [
        "model = Sequential()\n",
        "model.add(LSTM(256, input_shape=(WINDOW_SIZE,1)))\n",
        "model.add(Dense(1, activation='relu'))\n",
        "model.summary()\n",
        "model.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.SGD(), metrics=['accuracy'])\n",
        "model.fit(input_val,target, epochs=200)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2Rl-M3EvRyaJ"
      },
      "source": [
        "#Testing data yet to be got\n",
        "# "
      ]
    }
  ]
}